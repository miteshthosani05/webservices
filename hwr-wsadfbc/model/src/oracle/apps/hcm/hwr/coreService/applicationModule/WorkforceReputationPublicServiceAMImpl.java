package oracle.apps.hcm.hwr.coreService.applicationModule;


import oracle.apps.fnd.applcore.oaext.model.OAApplicationModuleImpl;
import oracle.apps.hcm.hwr.coreService.adapters.HWRServiceHolder;
import oracle.apps.hcm.hwr.webservices.server.IHWREndorsementService;
import oracle.apps.hcm.hwr.webservices.server.IHWRPublicService;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 15 10:00:51 PDT 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class WorkforceReputationPublicServiceAMImpl extends OAApplicationModuleImpl {

  /**
   * This is the default constructor (do not remove).
   */
  public WorkforceReputationPublicServiceAMImpl() {


  }

  //For sending new user registrations and refreshing authtokens for existing users
  //Parameter:  PersonaSyncdata

  public String registerUser(String PersonaSyncdata) {
    IHWRPublicService myService =
      HWRServiceHolder.getInstance().getHWRPublicService();
    return myService.registerUser(PersonaSyncdata);
  }


  //For the client to poll the server for any jobs to run
  //Parameter: identifier for the WLA

  public String pollForJob(String WLA) {
    //return will either be:
    // a) Information about a job to run, including a job ID, job type, and all input needed by the WLA to execute the job.  The input will be specific to the job type
    // b) Indication from the server that there are no jobs for it to run.  The server will also provide a poll interval telling the client when it should next ask for another job
    IHWRPublicService myService =
      HWRServiceHolder.getInstance().getHWRPublicService();
    return myService.pollForJob(WLA);
  }


  //For Connector jobs to provide DataWriter input to the server
  //Parameter:  A block of DataWriter data

  public String writeConnectorData(String DataWriter) {
    IHWRPublicService myService =
      HWRServiceHolder.getInstance().getHWRPublicService();
    //Return: a Result indicating successful processing or that an error occurred
    return myService.writeConnectorData(DataWriter);
  }


  //For the client to return updates to PersonaSync data to the server
  //Parameter:  A block of PersonaSync data

  public String mergePersonaSyncData(String PersonaSyncdata) {
    IHWRPublicService myService =
      HWRServiceHolder.getInstance().getHWRPublicService();

    //Return: a Result indicating successful processing or that an error occurred
    return myService.mergeProfileSyncInfoData(PersonaSyncdata);
  }


  //For the client to return updates to PersonaSync data to the server
  //Parameter:  an identifier for the Job and progress info (status, number of items completed, total number of items to do)

  public String updateJobProgress(String JobId) {
    IHWRPublicService myService =
      HWRServiceHolder.getInstance().getHWRPublicService();
    //Return: a Result indicating successful processing or that an error occurred
    return myService.updateJobProgress(JobId);
  }

  /**
   * @param initialzationInfo
   * @return
   */
  public String initializeWLA(String initializationInformation) {
    IHWRPublicService myService =
      HWRServiceHolder.getInstance().getHWRPublicService();
    return myService.initializeWLA(initializationInformation);
  }

  /**
   * @param profileInfo
   * @return
   */
  public String getUserProfile(String profileInformation) {
    IHWRPublicService myService =
      HWRServiceHolder.getInstance().getHWRPublicService();
    return myService.getUserProfile(profileInformation);
  }

  /**
   * @param pGlobalProfileId
   * @return
   */
  public String getMyEndorsements(String pGlobalProfileId) {
    IHWREndorsementService myService =
      HWRServiceHolder.getInstance().getHWREndorsementService();
    return myService.getMyEndorsements(pGlobalProfileId);
  }

  /**
   * @param pSearchCriteria
   * @return
   */
  public String searchUserToEndorse(String pSearchCriteria) {
    IHWREndorsementService myService =
      HWRServiceHolder.getInstance().getHWREndorsementService();
    return myService.searchUserToEndorse(pSearchCriteria);
  }

  /**
   * @param pGlobalProfileIds
   * @return
   */
  public String getUserToEndorse(String pGlobalProfileIds) {
    IHWREndorsementService myService =
      HWRServiceHolder.getInstance().getHWREndorsementService();
    return myService.getUserToEndorse(pGlobalProfileIds);
  }

  /**
   * @param pEndorsement
   * @return
   */
  public String EndorseUser(String pEndorsement) {
    IHWREndorsementService myService =
      HWRServiceHolder.getInstance().getHWREndorsementService();
    return myService.endorseUser(pEndorsement);
  }
}
