package oracle.apps.hcm.hwr.coreService.applicationModule.server;

import java.lang.reflect.Method;

import java.util.HashMap;
import java.util.Map;

import javax.ejb.Remote;
import javax.ejb.Stateless;

import javax.ejb.TransactionAttribute;

import javax.ejb.TransactionAttributeType;


import javax.interceptor.Interceptors;


import oracle.apps.hcm.hwr.coreService.WorkforceReputationService;
import oracle.apps.hcm.hwr.coreService.applicationModule.WorkforceReputationPublicServiceAMImpl;

import oracle.jbo.common.Diagnostic;
import oracle.jbo.common.sdo.SDOHelper;
import oracle.jbo.server.svc.ServiceContextInterceptor;
import oracle.jbo.server.svc.ServiceImpl;
import oracle.jbo.server.svc.ServicePermissionCheckInterceptor;
import oracle.jbo.service.errors.ServiceException;

import oracle.webservices.annotations.PortableWebService;
import oracle.webservices.annotations.async.AsyncWebService;
import oracle.webservices.annotations.SecurityPolicy;
import oracle.webservices.annotations.async.AsyncWebServiceQueue;
import oracle.webservices.annotations.async.AsyncWebServiceResponseQueue;
import oracle.webservices.annotations.async.CallbackSecurityPolicy;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 04 14:05:44 PST 2012
// ---------------------------------------------------------------------
@Interceptors({ServiceContextInterceptor.class,ServicePermissionCheckInterceptor.class})
@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
@AsyncWebService(systemUser="FUSION_APPS_HCM_ASYNC_WS_APPID")
@AsyncWebServiceQueue(connectionFactory="aqjms/AsyncWSAQConnectionFactory", queue="oracle.j2ee.ws.server.async.AQRequestQueue", messageProcessorInitialPoolSize=1, messageProcessorMaxPoolSize=2)
@AsyncWebServiceResponseQueue(connectionFactory="aqjms/AsyncWSAQConnectionFactory", queue="oracle.j2ee.ws.server.async.AQResponseQueue",
messageProcessorInitialPoolSize=1, messageProcessorMaxPoolSize=2)
@SecurityPolicy( { "oracle/wss11_saml_or_username_token_with_message_protection_service_policy"})
@CallbackSecurityPolicy("oracle/wss11_saml_token_with_message_protection_client_policy")
@Stateless(name="oracle.apps.hcm.hwr.coreService.WorkforceReputationServiceBean",
  mappedName="WorkforceReputationServiceBean")
@Remote(WorkforceReputationService.class)
@PortableWebService(targetNamespace="http://xmlns.oracle.com/apps/hcm/hwr/coreService/",
  serviceName="WorkforceReputationService", portName="WorkforceReputationServiceSoapHttpPort",
  endpointInterface="oracle.apps.hcm.hwr.coreService.WorkforceReputationService")
public class WorkforceReputationServiceImpl extends ServiceImpl implements WorkforceReputationService {
    private static boolean _isInited = false;


  private static final Map _map = new HashMap();

  /**
   * This is the default constructor (do not remove).
   */
    public WorkforceReputationServiceImpl() {
    init();
    setApplicationModuleDefName("oracle.apps.hcm.hwr.coreService.applicationModule.WorkforceReputationPublicServiceAM");
    setConfigurationName("WorkforceReputationService");
  }


  /**
   * Generated method. Do not modify. Do initialization in the constructor
   */
  protected void init() {
    if (_isInited) {
      return;
    }
    synchronized (WorkforceReputationServiceImpl.class) {
      if (_isInited) {
        return;
      }
      try {
        SDOHelper.INSTANCE.defineSchema("oracle/apps/hcm/hwr/coreService/", "WorkforceReputationService.xsd");
        _map.put("pollForJob",
                 WorkforceReputationPublicServiceAMImpl.class.getMethod("pollForJob",
                                                                        new Class[] { String.class }));
        _map.put("updateJobProgress",
                 WorkforceReputationPublicServiceAMImpl.class.getMethod("updateJobProgress",
                                                                        new Class[] { String.class }));
        _map.put("writeConnectorData",
                 WorkforceReputationPublicServiceAMImpl.class.getMethod("writeConnectorData",
                                                                        new Class[] { String.class }));
        _map.put("mergePersonaSyncData",
                 WorkforceReputationPublicServiceAMImpl.class.getMethod("mergePersonaSyncData",
                                                                        new Class[] { String.class }));
        _map.put("registerUser",
                 WorkforceReputationPublicServiceAMImpl.class.getMethod("registerUser",
                                                                        new Class[] { String.class }));
        _map.put("initializeWLA",
                 WorkforceReputationPublicServiceAMImpl.class.getMethod("initializeWLA",
                                                                        new Class[] { String.class }));
        _map.put("getUserProfile",
                 WorkforceReputationPublicServiceAMImpl.class.getMethod("getUserProfile",
                                                                        new Class[] { String.class }));
        _map.put("getMyEndorsements",
                 WorkforceReputationPublicServiceAMImpl.class.getMethod("getMyEndorsements",
                                                                        new Class[] { String.class }));
        _map.put("getUserToEndorse",
                 WorkforceReputationPublicServiceAMImpl.class.getMethod("getUserToEndorse",
                                                                        new Class[] { String.class }));
        _map.put("searchUserToEndorse",
                 WorkforceReputationPublicServiceAMImpl.class.getMethod("searchUserToEndorse",
                                                                        new Class[] { String.class }));
        _map.put("EndorseUser",
                 WorkforceReputationPublicServiceAMImpl.class.getMethod("EndorseUser",
                                                                        new Class[] { String.class }));
        _isInited = true;
      } catch (Exception t) {
        Diagnostic.printStackTrace(t);
      }
    }
  }

  /**
   * pollForJob: generated method. Do not modify.
   */
    public String pollForJob(String WLA) throws ServiceException {
        return (String)invokeCustom((Method)_map.get("pollForJob"),
                                    new Object[] { WLA },
                                    new String[] { null }, false);
    }

    /**
     * updateJobProgress: generated method. Do not modify.
     */
    public String updateJobProgress(String JobId) throws ServiceException {
        return (String)invokeCustom((Method)_map.get("updateJobProgress"),
                                    new Object[] { JobId },
                                    new String[] { null }, false);
    }

    /**
     * writeConnectorData: generated method. Do not modify.
     */
    public String writeConnectorData(String DataWriter) throws ServiceException {
        return (String)invokeCustom((Method)_map.get("writeConnectorData"),
                                    new Object[] { DataWriter },
                                    new String[] { null }, false);
    }

    /**
     * mergePersonaSyncData: generated method. Do not modify.
     */
    public String mergePersonaSyncData(String PersonaSyncdata) throws ServiceException {
        return (String)invokeCustom((Method)_map.get("mergePersonaSyncData"),
                                    new Object[] { PersonaSyncdata },
                                    new String[] { null }, false);
    }

    /**
     * registerUser: generated method. Do not modify.
     */
    public String registerUser(String PersonaSyncdata) throws ServiceException {
        return (String)invokeCustom((Method)_map.get("registerUser"),
                                    new Object[] { PersonaSyncdata },
                                    new String[] { null }, false);
    }

    /**
     * mergePersonaSyncDataAsync: generated method. Do not modify.
     */
    public String mergePersonaSyncDataAsync(String PersonaSyncdata) throws ServiceException {
    return mergePersonaSyncData(PersonaSyncdata);
  }

    /**
     * updateJobProgressAsync: generated method. Do not modify.
     */
    public String updateJobProgressAsync(String JobId) throws ServiceException {
    return updateJobProgress(JobId);
  }

    /**
     * pollForJobAsync: generated method. Do not modify.
     */
    public String pollForJobAsync(String WLA) throws ServiceException {
    return pollForJob(WLA);
  }

    /**
     * writeConnectorDataAsync: generated method. Do not modify.
     */
    public String writeConnectorDataAsync(String DataWriter) throws ServiceException {
    return writeConnectorData(DataWriter);
  }

    /**
     * registerUserAsync: generated method. Do not modify.
     */
    public String registerUserAsync(String PersonaSyncdata) throws ServiceException {
    return registerUser(PersonaSyncdata);
  }

    /**
     * initializeWLA: generated method. Do not modify.
     */
    public String initializeWLA(String initializationInformation) throws ServiceException {
        return (String)invokeCustom((Method)_map.get("initializeWLA"),
                                    new Object[] { initializationInformation },
                                    new String[] { null }, false);
    }

    /**
     * getUserProfile: generated method. Do not modify.
     */
    public String getUserProfile(String profileInformation) throws ServiceException {
        return (String)invokeCustom((Method)_map.get("getUserProfile"),
                                    new Object[] { profileInformation },
                                    new String[] { null }, false);
    }

    /**
     * initializeWLAAsync: generated method. Do not modify.
     */
    public String initializeWLAAsync(String initializationInformation) throws ServiceException {
    return initializeWLA(initializationInformation);
  }

    /**
     * getUserProfileAsync: generated method. Do not modify.
     */
    public String getUserProfileAsync(String profileInformation) throws ServiceException {
    return getUserProfile(profileInformation);
  }

  /**
   * getMyEndorsements: generated method. Do not modify.
   */
  public String getMyEndorsements(String pGlobalProfileId) throws ServiceException {
    return (String)invokeCustom((Method)_map.get("getMyEndorsements"),
                                new Object[] { pGlobalProfileId },
                                new String[] { null }, false);
  }

  /**
   * getUserToEndorse: generated method. Do not modify.
   */
  public String getUserToEndorse(String pGlobalProfileIds) throws ServiceException {
    return (String)invokeCustom((Method)_map.get("getUserToEndorse"),
                                new Object[] { pGlobalProfileIds },
                                new String[] { null }, false);
  }

  /**
   * searchUserToEndorse: generated method. Do not modify.
   */
  public String searchUserToEndorse(String pSearchCriteria) throws ServiceException {
    return (String)invokeCustom((Method)_map.get("searchUserToEndorse"),
                                new Object[] { pSearchCriteria },
                                new String[] { null }, false);
  }

  /**
   * EndorseUser: generated method. Do not modify.
   */
  public String EndorseUser(String pEndorsement) throws ServiceException {
    return (String)invokeCustom((Method)_map.get("EndorseUser"),
                                new Object[] { pEndorsement },
                                new String[] { null }, false);
  }

  /**
   * getUserToEndorseAsync: generated method. Do not modify.
   */
  public String getUserToEndorseAsync(String pGlobalProfileIds) throws ServiceException {
    return getUserToEndorse(pGlobalProfileIds);
  }

  /**
   * searchUserToEndorseAsync: generated method. Do not modify.
   */
  public String searchUserToEndorseAsync(String pSearchCriteria) throws ServiceException {
    return searchUserToEndorse(pSearchCriteria);
  }

  /**
   * EndorseUserAsync: generated method. Do not modify.
   */
  public String EndorseUserAsync(String pEndorsement) throws ServiceException {
    return EndorseUser(pEndorsement);
  }

  /**
   * getMyEndorsementsAsync: generated method. Do not modify.
   */
  public String getMyEndorsementsAsync(String pGlobalProfileId) throws ServiceException {
    return getMyEndorsements(pGlobalProfileId);
  }
}
