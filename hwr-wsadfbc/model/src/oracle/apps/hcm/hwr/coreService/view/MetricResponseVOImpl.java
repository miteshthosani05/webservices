package oracle.apps.hcm.hwr.coreService.view;

import java.sql.ResultSet;

import java.util.Iterator;
import java.util.List;

import oracle.apps.fnd.applcore.oaext.model.OAViewObjectImpl;

import oracle.apps.hcm.hwr.coreService.serviceProvider.MetricDataProvider;
import oracle.apps.hcm.hwr.coreService.serviceProvider.MetricData;

import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 29 02:00:10 PDT 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MetricResponseVOImpl extends OAViewObjectImpl {
  /**
   * This is the default constructor (do not remove).
   */
  public MetricResponseVOImpl() {
  }

  /**
   * executeQueryForCollection - overridden for custom java data source support.
   */
  protected void executeQueryForCollection(Object qc, Object[] params,
                                           int noUserParams) {
    super.executeQueryForCollection(qc, params, noUserParams);
    Object myMetricDataList = getMetricDataObjects();
    if (myMetricDataList != null) {
      setUserDataForCollection(qc,
                               new MetricDataProvider((List<MetricData>)myMetricDataList));
    }
  }

  /**
   * hasNextForCollection - overridden for custom java data source support.
   */
  protected boolean hasNextForCollection(Object qc) {
    return ((MetricDataProvider)getUserDataForCollection(qc)).getMetricDataIterator().hasNext();
  }

  /**
   * createRowFromResultSet - overridden for custom java data source support.
   */
  protected ViewRowImpl createRowFromResultSet(Object qc,
                                               ResultSet resultSet) {
    Iterator<MetricData> myIterator =
      ((MetricDataProvider)getUserDataForCollection(qc)).getMetricDataIterator();
    ViewRowImpl value = null;
    if (!myIterator.hasNext()) {
      setFetchCompleteForCollection(qc, true);
    } else {
      MetricData myMetricData = myIterator.next();
      value = super.createNewRowForCollection(qc);


      populateAttributeForRow(value,
                              MetricResponseVORowImpl.AttributesEnum.CompletedItems.index(),
                              myMetricData.getCompletedItems());

      populateAttributeForRow(value,
                              MetricResponseVORowImpl.AttributesEnum.TimeStampofCompletion.index(),
                              myMetricData.getTimeStamp());


    }
    return value;
  }

  /**
   * getQueryHitCount - overridden for custom java data source support.
   */
  public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
    long value = super.getQueryHitCount(viewRowSet);
    return value;
  }

  /**
   * Returns the bind variable value for MetricDataObjects.
   * @return bind variable value for MetricDataObjects
   */
  public Object getMetricDataObjects() {
    return (Object)getNamedWhereClauseParam("MetricDataObjects");
  }

  /**
   * Sets <code>value</code> for bind variable MetricDataObjects.
   * @param value value to bind as MetricDataObjects
   */
  public void setMetricDataObjects(Object value) {
    setNamedWhereClauseParam("MetricDataObjects", value);
  }
}
