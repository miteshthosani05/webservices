package oracle.apps.hcm.hwr.coreService.applicationModule;

import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;

import java.text.SimpleDateFormat;


import java.util.TimeZone;

import oracle.jbo.AttributeList;

import oracle.apps.fnd.applcore.oaext.model.OAApplicationModuleImpl;

import oracle.apps.hcm.hwr.coreService.serviceProvider.MetricData;
import oracle.apps.hcm.hwr.coreService.serviceProvider.MetricServiceProvider;
import oracle.apps.hcm.hwr.coreService.view.MetricResponseVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Jun 02 21:43:54 PDT 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------

public class WorkforceReputationMetricServiceAMImpl extends OAApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public WorkforceReputationMetricServiceAMImpl() {
    }

    /**
     *This is the number of posts that were discovered and analyzed on a given date.
     * @param pDate
     * @param pApplicationShortCode
     * @param pJob
     * @param pJobSet
     * @param pTimePeriod
     * @return
     */
    public List<AttributeList> getHWRPostsAnalyzedCount(long pTimePeriod) {

        MetricServiceProvider myMetricServiceProvider =
            new MetricServiceProvider();
        Map<Date, Long> myMap =
            myMetricServiceProvider.getPostsAnalyzedCount(pTimePeriod);
        List<MetricData> myMetricDataList = new ArrayList<MetricData>();
        List<Date> myDates = new ArrayList<Date>(myMap.keySet());
        for (Date myDate : myDates) {
            Long myCount = myMap.get(myDate);
            MetricData myMetricData = new MetricData();
            myMetricData.setCompletedItems(myCount);
            SimpleDateFormat sdf2 =
                new SimpleDateFormat("yyyy-MM-dd HH:mm:ss 'UTC'");
            sdf2.setTimeZone(TimeZone.getTimeZone("UTC"));
            myMetricData.setTimeStamp(sdf2.format(myDate));
            myMetricDataList.add(myMetricData);
        }


        MetricResponseVOImpl myMetricViewObjImpl = getMetricResponse1();
        myMetricViewObjImpl.setMetricDataObjects(myMetricDataList);
        List<AttributeList> myAttributeListReturn =
            new ArrayList<AttributeList>();
        while (myMetricViewObjImpl.hasNext()) {
            AttributeList myRow = myMetricViewObjImpl.next();
            myAttributeListReturn.add(myRow);
        }
        return myAttributeListReturn;
    }

    /**
     *This is the number of posts that may have violated a social media compliance control on a given date.
     * @param pDate
     * @param pApplicationShortCode
     * @param pJob
     * @param pJobSet
     * @param pTimePeriod
     * @return
     */

    public List<AttributeList> getHWRIssuesCount(long pTimePeriod) {

        MetricServiceProvider myMetricServiceProvider =
            new MetricServiceProvider();

        Map<Date, Long> myMap =
            myMetricServiceProvider.getIssuesCount(pTimePeriod);

        List<MetricData> myMetricDataList = new ArrayList<MetricData>();
        List<Date> myDates = new ArrayList<Date>(myMap.keySet());
        for (Date myDate : myDates) {
            Long myCount = myMap.get(myDate);
            MetricData myMetricData = new MetricData();
            myMetricData.setCompletedItems(myCount);
            SimpleDateFormat sdf2 =
                new SimpleDateFormat("yyyy-MM-dd HH:mm:ss 'UTC'");
            sdf2.setTimeZone(TimeZone.getTimeZone("UTC"));
            myMetricData.setTimeStamp(sdf2.format(myDate));
            myMetricDataList.add(myMetricData);
        }


        MetricResponseVOImpl myMetricViewObjImpl = getMetricResponse1();
        myMetricViewObjImpl.setMetricDataObjects(myMetricDataList);
        List<AttributeList> myAttributeListReturn =
            new ArrayList<AttributeList>();
        while (myMetricViewObjImpl.hasNext()) {
            AttributeList myRow = myMetricViewObjImpl.next();
            myAttributeListReturn.add(myRow);
        }
        return myAttributeListReturn;

    }

    /**
     *This is the number of new Profile objects added on a date, across all social media types.
     * @param pDate
     * @param pApplicationShortCode
     * @param pJob
     * @param pJobSet
     * @param pTimePeriod
     * @return
     */
    public List<AttributeList> getHWRProfilesAddedCount(long pTimePeriod) {

        MetricServiceProvider myMetricServiceProvider =
            new MetricServiceProvider();

        Map<Date, Long> myMap =
            myMetricServiceProvider.getProfilesAddedCount(pTimePeriod);

        List<MetricData> myMetricDataList = new ArrayList<MetricData>();
        List<Date> myDates = new ArrayList<Date>(myMap.keySet());
        for (Date myDate : myDates) {
            Long myCount = myMap.get(myDate);
            MetricData myMetricData = new MetricData();
            myMetricData.setCompletedItems(myCount);
            SimpleDateFormat sdf2 =
                new SimpleDateFormat("yyyy-MM-dd HH:mm:ss 'UTC'");
            sdf2.setTimeZone(TimeZone.getTimeZone("UTC"));
            myMetricData.setTimeStamp(sdf2.format(myDate));
            myMetricDataList.add(myMetricData);
        }


        MetricResponseVOImpl myMetricViewObjImpl = getMetricResponse1();
        myMetricViewObjImpl.setMetricDataObjects(myMetricDataList);
        List<AttributeList> myAttributeListReturn =
            new ArrayList<AttributeList>();
        while (myMetricViewObjImpl.hasNext()) {
            AttributeList myRow = myMetricViewObjImpl.next();
            myAttributeListReturn.add(myRow);
        }
        return myAttributeListReturn;

    }

    /**
     *The number of Global Profiles added to the system that also have an active HCM Profile.
     * @param pDate
     * @param pApplicationShortCode
     * @param pJob
     * @param pJobSet
     * @param pTimePeriod
     * @return
     */
    public List<AttributeList> getHWREmployeesAddedCount(long pTimePeriod) {
        MetricServiceProvider myMetricServiceProvider =
            new MetricServiceProvider();

        Map<Date, Long> myMap =
            myMetricServiceProvider.getEmployeesAddedCount(pTimePeriod);

        List<MetricData> myMetricDataList = new ArrayList<MetricData>();
        List<Date> myDates = new ArrayList<Date>(myMap.keySet());
        for (Date myDate : myDates) {
            Long myCount = myMap.get(myDate);
            MetricData myMetricData = new MetricData();
            myMetricData.setCompletedItems(myCount);
            SimpleDateFormat sdf2 =
                new SimpleDateFormat("yyyy-MM-dd HH:mm:ss 'UTC'");
            sdf2.setTimeZone(TimeZone.getTimeZone("UTC"));
            myMetricData.setTimeStamp(sdf2.format(myDate));
            myMetricDataList.add(myMetricData);
        }


        MetricResponseVOImpl myMetricViewObjImpl = getMetricResponse1();
        myMetricViewObjImpl.setMetricDataObjects(myMetricDataList);
        List<AttributeList> myAttributeListReturn =
            new ArrayList<AttributeList>();
        while (myMetricViewObjImpl.hasNext()) {
            AttributeList myRow = myMetricViewObjImpl.next();
            myAttributeListReturn.add(myRow);
        }
        return myAttributeListReturn;

    }

    /**
     *The number of Global Profiles added to the system that do not have an active HCM Profile, which makes them a Candidate.
     * @param pDate
     * @param pApplicationShortCode
     * @param pJob
     * @param pJobSet
     * @param pTimePeriod
     * @return
     */

    public List<AttributeList> getHWRCandidatesAddedCount(long pTimePeriod) {
        MetricServiceProvider myMetricServiceProvider =
            new MetricServiceProvider();

        Map<Date, Long> myMap =
            myMetricServiceProvider.getCandidatesAddedCount(pTimePeriod);

        List<MetricData> myMetricDataList = new ArrayList<MetricData>();
        List<Date> myDates = new ArrayList<Date>(myMap.keySet());
        for (Date myDate : myDates) {
            Long myCount = myMap.get(myDate);
            MetricData myMetricData = new MetricData();
            myMetricData.setCompletedItems(myCount);
            SimpleDateFormat sdf2 =
                new SimpleDateFormat("yyyy-MM-dd HH:mm:ss 'UTC'");
            sdf2.setTimeZone(TimeZone.getTimeZone("UTC"));
            myMetricData.setTimeStamp(sdf2.format(myDate));
            myMetricDataList.add(myMetricData);
        }


        MetricResponseVOImpl myMetricViewObjImpl = getMetricResponse1();
        myMetricViewObjImpl.setMetricDataObjects(myMetricDataList);
        List<AttributeList> myAttributeListReturn =
            new ArrayList<AttributeList>();
        while (myMetricViewObjImpl.hasNext()) {
            AttributeList myRow = myMetricViewObjImpl.next();
            myAttributeListReturn.add(myRow);
        }
        return myAttributeListReturn;

    }

    /**
     *The number of registrations that occurred on a date.
     * @param pDate
     * @param pApplicationShortCode
     * @param pJob
     * @param pJobSet
     * @param pTimePeriod
     * @return
     */

    public List<AttributeList> getHWRRegisteredEmployeeCount(long pTimePeriod) {

        MetricServiceProvider myMetricServiceProvider =
            new MetricServiceProvider();

        Map<Date, Long> myMap =
            myMetricServiceProvider.getRegisteredEmployeeCount(pTimePeriod);

        List<MetricData> myMetricDataList = new ArrayList<MetricData>();
        List<Date> myDates = new ArrayList<Date>(myMap.keySet());
        for (Date myDate : myDates) {
            Long myCount = myMap.get(myDate);
            MetricData myMetricData = new MetricData();
            myMetricData.setCompletedItems(myCount);
            SimpleDateFormat sdf2 =
                new SimpleDateFormat("yyyy-MM-dd HH:mm:ss 'UTC'");
            sdf2.setTimeZone(TimeZone.getTimeZone("UTC"));
            myMetricData.setTimeStamp(sdf2.format(myDate));
            myMetricDataList.add(myMetricData);
        }


        MetricResponseVOImpl myMetricViewObjImpl = getMetricResponse1();
        myMetricViewObjImpl.setMetricDataObjects(myMetricDataList);
        List<AttributeList> myAttributeListReturn =
            new ArrayList<AttributeList>();
        while (myMetricViewObjImpl.hasNext()) {
            AttributeList myRow = myMetricViewObjImpl.next();
            myAttributeListReturn.add(myRow);
        }
        return myAttributeListReturn;


    }

    public AttributeList getPostsAnalyzedCount(long pTimePeriod) {
        return null;
    }

    public AttributeList getIssuesCount(long pTimePeriod) {
        return null;
    }

    public AttributeList getProfilesAddedCount(long pTimePeriod) {
        return null;
    }

    public AttributeList getEmployeesAddedCount(long pTimePeriod) {
        return null;
    }

    public AttributeList getCandidatesAddedCount(long pTimePeriod) {
        return null;
    }

    public AttributeList getRegisteredEmployeeCount(long pTimePeriod) {
        return null;
    }


    /**
     * Container's getter for MetricResponse1.
     * @return MetricResponse1
     */
    public MetricResponseVOImpl getMetricResponse1() {
        return (MetricResponseVOImpl)findViewObject("MetricResponse1");
    }
}
